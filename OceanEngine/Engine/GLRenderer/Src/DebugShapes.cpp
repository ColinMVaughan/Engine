#include "DebugShapes.h"


float DebugCube[] =
{
	-1.0f, -1.0f, 1.0f,
	1.0f, -1.0f, 1.0f,
	1.0f, 1.0f, 1.0f,
	-1.0f, 1.0f, 1.0f,
	1.0f, 1.0f, 1.0f,
	1.0f, 1.0f, -1.0f,
	-1.0f, 1.0f, -1.0f,
	1.0f, 1.0f, -1.0f,
	1.0f, -1.0f, -1.0f,
	-1.0f, -1.0f, -1.0f,
	1.0f, -1.0f, -1.0f,
	1.0f, -1.0f, 1.0f,
	1.0f, -1.0f, 1.0f,
	1.0f, -1.0f, -1.0f,
	1.0f, 1.0f, -1.0f,
	-1.0f, -1.0f, -1.0f,
	-1.0f, -1.0f, 1.0f,
	-1.0f, 1.0f, 1.0f
};

float DebugSphere[] = 
{
	0.25f, -0.951057f, -0.181636f,
	0.095491f, -0.951057f, -0.293893f,
	0.181636f, -0.809017f, -0.559017f,
	0.095491f, -0.951057f, -0.293893f,
	-0.095492f, -0.951057f, -0.293893f,
	-0.181636f, -0.809017f, -0.559017f,
	-0.095492f, -0.951057f, -0.293893f,
	-0.25f, -0.951057f, -0.181636f,
	-0.475528f, -0.809017f, -0.345491f,
	-0.25f, -0.951057f, -0.181636f,
	-0.309017f, -0.951057f, 0.0f,
	-0.587785f, -0.809017f, 0.0f,
	-0.309017f, -0.951057f, 0.0f,
	-0.25f, -0.951057f, 0.181636f,
	-0.475528f, -0.809017f, 0.345492f,
	-0.25f, -0.951057f, 0.181636f,
	-0.095491f, -0.951057f, 0.293893f,
	-0.181636f, -0.809017f, 0.559017f,
	-0.095491f, -0.951057f, 0.293893f,
	0.095492f, -0.951057f, 0.293893f,
	0.181636f, -0.809017f, 0.559017f,
	0.095492f, -0.951057f, 0.293893f,
	0.25f, -0.951057f, 0.181636f,
	0.475528f, -0.809017f, 0.345491f,
	0.25f, -0.951057f, 0.181636f,
	0.309017f, -0.951057f, 0.0f,
	0.587785f, -0.809017f, 0.0f,
	0.309017f, -0.951057f, 0.0f,
	0.25f, -0.951057f, -0.181636f,
	0.475528f, -0.809017f, -0.345492f,
	0.475528f, -0.809017f, -0.345492f,
	0.181636f, -0.809017f, -0.559017f,
	0.25f, -0.587785f, -0.769421f,
	0.181636f, -0.809017f, -0.559017f,
	-0.181636f, -0.809017f, -0.559017f,
	-0.25f, -0.587785f, -0.769421f,
	-0.181636f, -0.809017f, -0.559017f,
	-0.475528f, -0.809017f, -0.345491f,
	-0.654509f, -0.587785f, -0.475528f,
	-0.475528f, -0.809017f, -0.345491f,
	-0.587785f, -0.809017f, 0.0f,
	-0.809017f, -0.587785f, 0.0f,
	-0.587785f, -0.809017f, 0.0f,
	-0.475528f, -0.809017f, 0.345492f,
	-0.654509f, -0.587785f, 0.475528f,
	-0.475528f, -0.809017f, 0.345492f,
	-0.181636f, -0.809017f, 0.559017f,
	-0.25f, -0.587785f, 0.769421f,
	-0.181636f, -0.809017f, 0.559017f,
	0.181636f, -0.809017f, 0.559017f,
	0.25f, -0.587785f, 0.769421f,
	0.181636f, -0.809017f, 0.559017f,
	0.475528f, -0.809017f, 0.345491f,
	0.654509f, -0.587785f, 0.475528f,
	0.475528f, -0.809017f, 0.345491f,
	0.587785f, -0.809017f, 0.0f,
	0.809017f, -0.587785f, 0.0f,
	0.587785f, -0.809017f, 0.0f,
	0.475528f, -0.809017f, -0.345492f,
	0.654509f, -0.587785f, -0.475528f,
	0.654509f, -0.587785f, -0.475528f,
	0.25f, -0.587785f, -0.769421f,
	0.293893f, -0.309017f, -0.904509f,
	0.25f, -0.587785f, -0.769421f,
	-0.25f, -0.587785f, -0.769421f,
	-0.293893f, -0.309017f, -0.904509f,
	-0.25f, -0.587785f, -0.769421f,
	-0.654509f, -0.587785f, -0.475528f,
	-0.769421f, -0.309017f, -0.559017f,
	-0.654509f, -0.587785f, -0.475528f,
	-0.809017f, -0.587785f, 0.0f,
	-0.951057f, -0.309017f, 0.0f,
	-0.809017f, -0.587785f, 0.0f,
	-0.654509f, -0.587785f, 0.475528f,
	-0.769421f, -0.309017f, 0.559017f,
	-0.654509f, -0.587785f, 0.475528f,
	-0.25f, -0.587785f, 0.769421f,
	-0.293893f, -0.309017f, 0.904509f,
	-0.25f, -0.587785f, 0.769421f,
	0.25f, -0.587785f, 0.769421f,
	0.293893f, -0.309017f, 0.904509f,
	0.25f, -0.587785f, 0.769421f,
	0.654509f, -0.587785f, 0.475528f,
	0.769421f, -0.309017f, 0.559017f,
	0.654509f, -0.587785f, 0.475528f,
	0.809017f, -0.587785f, 0.0f,
	0.951057f, -0.309017f, 0.0f,
	0.809017f, -0.587785f, 0.0f,
	0.654509f, -0.587785f, -0.475528f,
	0.769421f, -0.309017f, -0.559017f,
	0.769421f, -0.309017f, -0.559017f,
	0.293893f, -0.309017f, -0.904509f,
	0.309017f, 0.0f, -0.951057f,
	0.293893f, -0.309017f, -0.904509f,
	-0.293893f, -0.309017f, -0.904509f,
	-0.309017f, 0.0f, -0.951057f,
	-0.293893f, -0.309017f, -0.904509f,
	-0.769421f, -0.309017f, -0.559017f,
	-0.809017f, 0.0f, -0.587785f,
	-0.769421f, -0.309017f, -0.559017f,
	-0.951057f, -0.309017f, 0.0f,
	-1.0f, 0.0f, 0.0f,
	-0.951057f, -0.309017f, 0.0f,
	-0.769421f, -0.309017f, 0.559017f,
	-0.809017f, 0.0f, 0.587785f,
	-0.769421f, -0.309017f, 0.559017f,
	-0.293893f, -0.309017f, 0.904509f,
	-0.309017f, 0.0f, 0.951057f,
	-0.293893f, -0.309017f, 0.904509f,
	0.293893f, -0.309017f, 0.904509f,
	0.309017f, 0.0f, 0.951057f,
	0.293893f, -0.309017f, 0.904509f,
	0.769421f, -0.309017f, 0.559017f,
	0.809017f, 0.0f, 0.587785f,
	0.769421f, -0.309017f, 0.559017f,
	0.951057f, -0.309017f, 0.0f,
	1.0f, 0.0f, 0.0f,
	0.951057f, -0.309017f, 0.0f,
	0.769421f, -0.309017f, -0.559017f,
	0.809017f, 0.0f, -0.587785f,
	0.809017f, 0.0f, -0.587785f,
	0.309017f, 0.0f, -0.951057f,
	0.293893f, 0.309017f, -0.904509f,
	0.309017f, 0.0f, -0.951057f,
	-0.309017f, 0.0f, -0.951057f,
	-0.293893f, 0.309017f, -0.904509f,
	-0.309017f, 0.0f, -0.951057f,
	-0.809017f, 0.0f, -0.587785f,
	-0.769421f, 0.309017f, -0.559017f,
	-0.809017f, 0.0f, -0.587785f,
	-1.0f, 0.0f, 0.0f,
	-0.951057f, 0.309017f, 0.0f,
	-1.0f, 0.0f, 0.0f,
	-0.809017f, 0.0f, 0.587785f,
	-0.769421f, 0.309017f, 0.559017f,
	-0.809017f, 0.0f, 0.587785f,
	-0.309017f, 0.0f, 0.951057f,
	-0.293893f, 0.309017f, 0.904509f,
	-0.309017f, 0.0f, 0.951057f,
	0.309017f, 0.0f, 0.951057f,
	0.293893f, 0.309017f, 0.904509f,
	0.309017f, 0.0f, 0.951057f,
	0.809017f, 0.0f, 0.587785f,
	0.769421f, 0.309017f, 0.559017f,
	0.809017f, 0.0f, 0.587785f,
	1.0f, 0.0f, 0.0f,
	0.951057f, 0.309017f, 0.0f,
	1.0f, 0.0f, 0.0f,
	0.809017f, 0.0f, -0.587785f,
	0.769421f, 0.309017f, -0.559017f,
	0.769421f, 0.309017f, -0.559017f,
	0.293893f, 0.309017f, -0.904509f,
	0.25f, 0.587785f, -0.769421f,
	0.293893f, 0.309017f, -0.904509f,
	-0.293893f, 0.309017f, -0.904509f,
	-0.25f, 0.587785f, -0.769421f,
	-0.293893f, 0.309017f, -0.904509f,
	-0.769421f, 0.309017f, -0.559017f,
	-0.654509f, 0.587785f, -0.475528f,
	-0.769421f, 0.309017f, -0.559017f,
	-0.951057f, 0.309017f, 0.0f,
	-0.809017f, 0.587785f, 0.0f,
	-0.951057f, 0.309017f, 0.0f,
	-0.769421f, 0.309017f, 0.559017f,
	-0.654509f, 0.587785f, 0.475528f,
	-0.769421f, 0.309017f, 0.559017f,
	-0.293893f, 0.309017f, 0.904509f,
	-0.25f, 0.587785f, 0.769421f,
	-0.293893f, 0.309017f, 0.904509f,
	0.293893f, 0.309017f, 0.904509f,
	0.25f, 0.587785f, 0.769421f,
	0.293893f, 0.309017f, 0.904509f,
	0.769421f, 0.309017f, 0.559017f,
	0.654509f, 0.587785f, 0.475528f,
	0.769421f, 0.309017f, 0.559017f,
	0.951057f, 0.309017f, 0.0f,
	0.809017f, 0.587785f, 0.0f,
	0.951057f, 0.309017f, 0.0f,
	0.769421f, 0.309017f, -0.559017f,
	0.654509f, 0.587785f, -0.475528f,
	0.654509f, 0.587785f, -0.475528f,
	0.25f, 0.587785f, -0.769421f,
	0.181636f, 0.809017f, -0.559017f,
	0.25f, 0.587785f, -0.769421f,
	-0.25f, 0.587785f, -0.769421f,
	-0.181636f, 0.809017f, -0.559017f,
	-0.25f, 0.587785f, -0.769421f,
	-0.654509f, 0.587785f, -0.475528f,
	-0.475528f, 0.809017f, -0.345491f,
	-0.654509f, 0.587785f, -0.475528f,
	-0.809017f, 0.587785f, 0.0f,
	-0.587785f, 0.809017f, 0.0f,
	-0.809017f, 0.587785f, 0.0f,
	-0.654509f, 0.587785f, 0.475528f,
	-0.475528f, 0.809017f, 0.345492f,
	-0.654509f, 0.587785f, 0.475528f,
	-0.25f, 0.587785f, 0.769421f,
	-0.181636f, 0.809017f, 0.559017f,
	-0.25f, 0.587785f, 0.769421f,
	0.25f, 0.587785f, 0.769421f,
	0.181636f, 0.809017f, 0.559017f,
	0.25f, 0.587785f, 0.769421f,
	0.654509f, 0.587785f, 0.475528f,
	0.475528f, 0.809017f, 0.345491f,
	0.654509f, 0.587785f, 0.475528f,
	0.809017f, 0.587785f, 0.0f,
	0.587785f, 0.809017f, 0.0f,
	0.809017f, 0.587785f, 0.0f,
	0.654509f, 0.587785f, -0.475528f,
	0.475528f, 0.809017f, -0.345492f,
	0.475528f, 0.809017f, -0.345492f,
	0.181636f, 0.809017f, -0.559017f,
	0.095491f, 0.951057f, -0.293893f,
	0.181636f, 0.809017f, -0.559017f,
	-0.181636f, 0.809017f, -0.559017f,
	-0.095492f, 0.951057f, -0.293893f,
	-0.181636f, 0.809017f, -0.559017f,
	-0.475528f, 0.809017f, -0.345491f,
	-0.25f, 0.951057f, -0.181636f,
	-0.475528f, 0.809017f, -0.345491f,
	-0.587785f, 0.809017f, 0.0f,
	-0.309017f, 0.951057f, 0.0f,
	-0.587785f, 0.809017f, 0.0f,
	-0.475528f, 0.809017f, 0.345492f,
	-0.25f, 0.951057f, 0.181636f,
	-0.475528f, 0.809017f, 0.345492f,
	-0.181636f, 0.809017f, 0.559017f,
	-0.095491f, 0.951057f, 0.293893f,
	-0.181636f, 0.809017f, 0.559017f,
	0.181636f, 0.809017f, 0.559017f,
	0.095492f, 0.951057f, 0.293893f,
	0.181636f, 0.809017f, 0.559017f,
	0.475528f, 0.809017f, 0.345491f,
	0.25f, 0.951057f, 0.181636f,
	0.475528f, 0.809017f, 0.345491f,
	0.587785f, 0.809017f, 0.0f,
	0.309017f, 0.951057f, 0.0f,
	0.587785f, 0.809017f, 0.0f,
	0.475528f, 0.809017f, -0.345492f,
	0.25f, 0.951057f, -0.181636f,
	0.095491f, -0.951057f, -0.293893f,
	0.25f, -0.951057f, -0.181636f,
	0.0f, 1.0f, 0.0f,
	-0.095492f, -0.951057f, -0.293893f,
	0.095491f, -0.951057f, -0.293893f,
	0.0f, 1.0f, 0.0f,
	-0.25f, -0.951057f, -0.181636f,
	-0.095492f, -0.951057f, -0.293893f,
	0.0f, 1.0f, 0.0f,
	-0.309017f, -0.951057f, 0.0f,
	-0.25f, -0.951057f, -0.181636f,
	0.0f, 1.0f, 0.0f,
	-0.25f, -0.951057f, 0.181636f,
	-0.309017f, -0.951057f, 0.0f,
	0.0f, 1.0f, 0.0f,
	-0.095491f, -0.951057f, 0.293893f,
	-0.25f, -0.951057f, 0.181636f,
	0.0f, 1.0f, 0.0f,
	0.095492f, -0.951057f, 0.293893f,
	-0.095491f, -0.951057f, 0.293893f,
	0.0f, 1.0f, 0.0f,
	0.25f, -0.951057f, 0.181636f,
	0.095492f, -0.951057f, 0.293893f,
	0.0f, 1.0f, 0.0f,
	0.309017f, -0.951057f, 0.0f,
	0.25f, -0.951057f, 0.181636f,
	0.0f, 1.0f, 0.0f,
	0.25f, -0.951057f, -0.181636f,
	0.309017f, -0.951057f, 0.0f,
	0.0f, 1.0f, 0.0f,
	0.25f, 0.951057f, -0.181636f,
	0.095491f, 0.951057f, -0.293893f,
	0.0f, 1.0f, 0.0f,
	0.095491f, 0.951057f, -0.293893f,
	-0.095492f, 0.951057f, -0.293893f,
	0.0f, 1.0f, 0.0f,
	-0.095492f, 0.951057f, -0.293893f,
	-0.25f, 0.951057f, -0.181636f,
	0.0f, 1.0f, 0.0f,
	-0.25f, 0.951057f, -0.181636f,
	-0.309017f, 0.951057f, 0.0f,
	0.0f, 1.0f, 0.0f,
	-0.309017f, 0.951057f, 0.0f,
	-0.25f, 0.951057f, 0.181636f,
	0.0f, 1.0f, 0.0f,
	-0.25f, 0.951057f, 0.181636f,
	-0.095491f, 0.951057f, 0.293893f,
	0.0f, 1.0f, 0.0f,
	-0.095491f, 0.951057f, 0.293893f,
	0.095492f, 0.951057f, 0.293893f,
	0.0f, 1.0f, 0.0f,
	0.095492f, 0.951057f, 0.293893f,
	0.25f, 0.951057f, 0.181636f,
	0.0f, 1.0f, 0.f,
	0.25f, 0.951057f, 0.181636f,
	0.309017f, 0.951057f, 0.f,
	0.f, 1.f, 0.f,
	0.309017f, 0.951057f, 0.f,
	0.25f, 0.951057f, -0.181636f,
	0.f, 1.0f, 0.0f
};


float DebugArrows[] =
{
	0.0f, 0.0f, 0.0f,
	1.0f, 0.0f, 0.0f,

	0.0f, 0.0f, 0.0f,
	0.0f, 1.0f, 0.0f,

	0.0f, 0.0f, 0.0f,
	0.0f, 0.0f, 1.0f
};









void LoadDebugCube(Mesh & a_Mesh)
{
	const int vertexPosSize = sizeof(DebugCube);

	//Generate vertex array object & vetex buffer objects
	glGenVertexArrays(1, &a_Mesh.VAO);
	glGenBuffers(1, &a_Mesh.VBO_Verticies);

	glBindVertexArray(a_Mesh.VAO);
	glEnableVertexAttribArray(0); //Vertex

	glBindBuffer(GL_ARRAY_BUFFER, a_Mesh.VBO_Verticies);
	glBufferData(GL_ARRAY_BUFFER, vertexPosSize, &DebugCube[0], GL_STATIC_DRAW);
	glVertexAttribPointer((GLuint)0, 3, GL_FLOAT, GL_FALSE, sizeof(float) * 3, 0);

	glBindBuffer(GL_ARRAY_BUFFER, GL_NONE);
	glBindVertexArray(GL_NONE);

	a_Mesh._NumVertices = sizeof(DebugCube) / sizeof(*DebugCube);
}

void LoadDebugSphere(Mesh & a_Mesh)
{
	const int vertexPosSize = sizeof(DebugSphere);

	//Generate vertex array object & vetex buffer objects
	glGenVertexArrays(1, &a_Mesh.VAO);
	glGenBuffers(1, &a_Mesh.VBO_Verticies);

	glBindVertexArray(a_Mesh.VAO);
	glEnableVertexAttribArray(0); //Vertex

	glBindBuffer(GL_ARRAY_BUFFER, a_Mesh.VBO_Verticies);
	glBufferData(GL_ARRAY_BUFFER, vertexPosSize, &DebugSphere[0], GL_STATIC_DRAW);
	glVertexAttribPointer((GLuint)0, 3, GL_FLOAT, GL_FALSE, sizeof(float) * 3, 0);

	glBindBuffer(GL_ARRAY_BUFFER, GL_NONE);
	glBindVertexArray(GL_NONE);

	a_Mesh._NumVertices = sizeof(DebugSphere) / sizeof(*DebugSphere);
}

void LoadDebugCapsule(Mesh & a_Mesh)
{
}

void LoadDebugArrows(Mesh& a_Mesh)
{
	const int vertexPosSize = sizeof(DebugArrows);

	//Generate vertex array object & vetex buffer objects
	glGenVertexArrays(1, &a_Mesh.VAO);
	glGenBuffers(1, &a_Mesh.VBO_Verticies);

	glBindVertexArray(a_Mesh.VAO);
	glEnableVertexAttribArray(0); //Vertex

	glBindBuffer(GL_ARRAY_BUFFER, a_Mesh.VBO_Verticies);
	glBufferData(GL_ARRAY_BUFFER, vertexPosSize, &DebugArrows[0], GL_STATIC_DRAW);
	glVertexAttribPointer((GLuint)0, 3, GL_FLOAT, GL_FALSE, sizeof(float) * 3, 0);

	glBindBuffer(GL_ARRAY_BUFFER, GL_NONE);
	glBindVertexArray(GL_NONE);

	a_Mesh._NumVertices = sizeof(DebugArrows) / sizeof(*DebugArrows);
}

void LoadDebugLineStrip(Mesh & a_Mesh, glm::vec3 * points, unsigned int pointsSize)
{
	const int vertexSize = sizeof(glm::vec3) * pointsSize;

	if (a_Mesh.VAO == 0)
	{
		//Generate vertex array object & vetex buffer objects
		glGenVertexArrays(1, &a_Mesh.VAO);
		glGenBuffers(1, &a_Mesh.VBO_Verticies);
	}

	glBindVertexArray(a_Mesh.VAO);
	glEnableVertexAttribArray(0); //Vertex

	glBindBuffer(GL_ARRAY_BUFFER, a_Mesh.VBO_Verticies);
	glBufferData(GL_ARRAY_BUFFER, vertexSize, &points[0], GL_DYNAMIC_DRAW);
	glVertexAttribPointer((GLuint)0, 3, GL_FLOAT, GL_FALSE, sizeof(float) * 3, 0);

	glBindBuffer(GL_ARRAY_BUFFER, GL_NONE);
	glBindVertexArray(GL_NONE);

	a_Mesh._NumVertices = pointsSize;
}